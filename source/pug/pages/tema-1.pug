.container#tema_1

    .header-ecored
      h1 1. Ciclo FOR  

    .jumbotron.bg-white
      .row.justify-content-center
        .col-12.col-lg-8.mb-6
          img(src="assets/images/pages/tema_1/img_1_01.svg", alt="", style="width:100%")
        .col-12
          p La estructura #[strong #[i for]] se usa en aquellos casos en los cuales se tiene certeza de la cantidad de veces que se desea ejecutar un bloque de instrucciones.

          p #[strong Ejemplo:] leer 6 edades de aprendices, ingresar 100 salarios de empleados. 

          p El bloque de instrucciones que se repite se denomina cuerpo del bucle y cada repetición se denomina una iteración.

          p Esta estructura de control iterativa se utiliza en situaciones en las que se desea que una variable de control  tenga un valor inicial y un valor final predefinidos. No es necesario definir la variable de control antes del bucle, aunque se puede utilizar una variable ya definida previamente en el programa.

          p El bucle #[strong #[i for]] se puede usar para recorrer los items de cualquier secuencia (cadena, lista, tupla, conjunto, diccionario) y ejecutar un bloque de código sobre ese item. En cada iteración se tiene acceso a un único elemento de la secuencia.

        .col-12.my-5
          .console
            p.cl-gray Ejemplo:
            p.cl-green animales = ['leon', 'tigre', 'cocodrilo']
            p.cl-green for animal in animales:
            p.cl-green.mb-0 print ("El animal es: {0}, tamaño de palabra es: {1}".format(animal, len(animal)) )
          .result
            p El animall es: leon , tamaño de palabra es: 4
            p El animall es: tigre , tamaño de palabra es: 5
            p.mb-0 El animall es: cocodrilo , tamaño de palabra es: 9

        .col-12
          p La estructura del ciclo for es la siguiente:

        .col-12.col-md-5.my-5
          img(src="assets/images/pages/tema_1/img_1_02.svg", alt="", style="width:100%")          

       
    .jumbotron.bg-white
      .row
        .col-12
          .header-ecored.mt-3#tema1_1
            h2 1.1 Uso de RANGE

      .row.justify-content-center
        .col-12
          p.mb-4 Según Pérez(2016) en el ciclo iterativo #[strong #[i for]] se puede usar la función range, para indicar un rango de valores.

          .row
            .col-auto
              .jumbotron.mb-0
                p.mb-0 #[strong #[i range(valor_inicial,  valor_final)]]

          p.mt-4 Es posible indicar solo un valor final, en caso tal, el ciclo inicia en 0.

        .col-12.my-5
          .console
            p.cl-gray Ejemplo
            p.cl-green for i in range(5):
            p.cl-green.indent_01 print(i)
            p.cl-green.mb-0 print('fin del ciclo')
          .result
            p 0
            p 1
            p 2
            p 3
            p 4
            p.mb-0 fin del ciclo

        .col-12
          p.mb-0 Si se especifica el valor inicial y el valor final en la función range, el resultado imprimirá desde el valor inicial  hasta el valor final - 1, así:

        .col-12.my-5
          .console
            p.cl-gray Ejemplo
            p.cl-green for i in range(2, 5):
            p.cl-green.indent_01 print(i, i ** 3)
            p.cl-green.mb-0 print('fin del ciclo')
          .result
            p 2 8
            p 3 27
            p 4 64            
            p.mb-0 fin del ciclo

        .col-12
          p.mb-0 Para imprimir hasta el valor final, éste debe incrementarse en 1.


    .jumbotron.bg-white
      .row
        .col-12
          .header-ecored.mt-3#tema1_2
            h2 1.2 Conceptos: valor inicial, valor final, incremento.

      .row.justify-content-center
        .col-12
          p.mb-4 Cuando se deseen especificar los valores inicial, final y el incremento o decremento de la variable de control en el ciclo iterativo for, se usa la función range con tres argumentos así:

          .row
            .col-auto
              .jumbotron.mb-0
                p.mb-0 #[strong #[i range(valor_inicial, valor_final,   incremento/decremento)]]

          p.my-5 Cuando se omite, el incremento/decremento es implícitamente igual a 1.

          p.mb-0 El ciclo siempre incluye el #[strong valor_inicial] y excluye el #[strong valor_final] durante la iteración:

        .col-12.mt-5
          .console
            p.cl-gray Ejemplo
            p.cl-green for i in range(10, 0, -2):
            p.cl-green.indent_01 print(i)
            p.cl-green.mb-0 print('fin del ciclo')
          .result
            p 10
            p 8
            p 6
            p 4
            p 2
            p.mb-0 fin del ciclo

    .jumbotron.bg-white
      .row
        .col-12
          .header-ecored.mt-3#tema1_3
            h2 1.3 Usos y estructura

      .row.justify-content-center
        .col-12
          p.mb-4 La sentencia #[strong for] se puede usar para imprimir secuencias, tales como cadenas, listas, tuplas, conjuntos o diccionarios.

        .col-12.mt-3
          .list
            .list__item
              .list__item__icon
                img(src="assets/images/icons/icon_duoble_chevron.svg", alt="")
            .list__txt
              p #[strong Uso del ciclo iterativo for en cadenas]

        .col-12.mt-3
          .console
            p.cl-gray Ejemplo
            p.cl-green for character in "hola mundo":
            p.cl-green.indent_01 print(character)
            p.cl-green.mb-0 print("fin del ciclo")
          .result
            p h
            p o
            p l
            p.mb-5 a
            p m
            p u
            p n
            p d
            p o
            p.mb-0 fin del ciclo

        .hr-divider.my-5
        
        .col-12
          .list
            .list__item
              .list__item__icon
                img(src="assets/images/icons/icon_duoble_chevron.svg", alt="")
            .list__txt
              p #[strong Uso de la estructura de control iterativa for en listas]

        .col-12.mt-3
          .console
            p.cl-gray Ejemplo:
            p.cl-green nombre = "Alicia"
            p.cl-green edad = 25
            p.cl-green.mb-5 print(f"Me llamo {nombre} y tengo {edad} años.")  
            p.cl-green numeros = [0, 1, 2, 3, 4, 5]
            p.cl-green for numero in numeros:
            p.cl-green.indent_01 print (numero, end=" " )
            p.cl-green print("fin del ciclo")
          .result
            p Me llamo Alicia y tengo 25 años
            p.mb-0 0 1 2 3 4 5 fin del ciclo

        .hr-divider.my-5
        
        .col-12
          .list
            .list__item
              .list__item__icon
                img(src="assets/images/icons/icon_duoble_chevron.svg", alt="")
            .list__txt
              p #[strong Uso del bucle #[i for] en tuplas]

        .col-12.mt-3
          .console
            p.cl-gray Ejemplo
            p.cl-green conexion_bd = ("115.16.10.5","root","7890","clientes")
            p.cl-green print("la tupla es: ")
            p.cl-green for parametro in conexion_bd:
            p.cl-green.indent_01 print (parametro)
            p.cl-green print ("fin del ciclo")
          .result 
            p la tupla es:
            p 115.16.10.5
            p root
            p 7890
            p clientes
            p.mb-0 fin del ciclo

        .hr-divider.my-5
        
        .col-12
          .list
            .list__item
              .list__item__icon
                img(src="assets/images/icons/icon_duoble_chevron.svg", alt="")
            .list__txt
              p #[strong Uso del ciclo iterativo #[i for] en conjuntos]

        .col-12.mt-3
          .console
            p.cl-gray Ejemplo
            p.cl-green A={1, 2, 3, 5, 3, 6, 4, 2}
            p.cl-green print ("Los elementos del conjunto A son:")
            p.cl-green for elemento in A:
            p.cl-green.indent_01 print(elemento)
            p.cl-green print ("fin del ciclo for")
          .result
            p Los elementos del conjunto A son:
            p 1
            p 2
            p 3
            p 4
            p 5
            p 6
            p.mb-0 fin del ciclo for
        
        .hr-divider.my-5
        
        .col-12
          .list
            .list__item
              .list__item__icon
                img(src="assets/images/icons/icon_duoble_chevron.svg", alt="")
            .list__txt
              p #[strong Uso del bucle  #[i for] en diccionarios]

        .col-12.mt-3
          .console
            p.cl-gray Ejemplo
            p.cl-green ensalada = {'Manzana':'verde', 'Patilla':'rosado', 'Banano':'amarillo', 'Papaya':'naranja'}
            p.cl-green for nombre, color in ensalada.items():
            p.cl-green.indent_01 print (nombre, "es de color", color)
            p.cl-green.mb-0 print ("fin del ciclo")
          .result
            p Manzana es de color verde
            p Patilla es de color rosado
            p Banano es de color amarillo
            p Papaya es de color naranja
            p.mb-0 fin del ciclo            

        .col-12.mt-4
          p Otra forma de hacerlo en un diccionario es:

        .col-12.mt-3
          .console
            p.cl-gray Ejemplo
            p.cl-green ensalada = {'Manzana':'verde', 'Patilla':'rosado', 'Banano':'amarillo', 'Papaya':'naranja'}
            p.cl-green for elemento in ensalada:
            p.cl-green.indent_01 print (elemento, 'es de color', ensalada[elemento] )
            p.cl-green.mb-0 print ("fin del ciclo")
          .result
            p Manzana es de color verde
            p Patilla es de color rosado
            p Banano es de color amarillo
            p Papaya es de color naranja
            p.mb-0 fin del ciclo  


    .jumbotron.bg-white
      .row
        .col-12
          .header-ecored.mt-3#tema1_4
            h2 1.4 Sentencias BREAK, CONTINUE y PASS

      .row.justify-content-center
        .col-12
          p.mb-4 Nolasco(2018) afirma que con frecuencia se requiere interrumpir un ciclo repetitivo, bien sea porque se cumple una condición y se desea salir inmediatamente de él o simplemente se requiere volver a realizar otra iteración sin ejecutar las demás instrucciones del bloque de código. Algunas veces el programador suspende la codificación de un ciclo iterativo y desea colocar un mensaje temporal. Para esto existen las sentencias #[i Break, Continue y Pass.]

        .col-12.mt-3
          .list
            .list__item
              .list__item__icon
                img(src="assets/images/icons/icon_duoble_chevron.svg", alt="")
            .list__txt
              p #[strong #[i BREAK]]
        
        .col-12
          p A veces los ciclos se vuelven infinitos, porque la condición siempre es verdadera. Existe una instrucción de Python, break, que permite salir de un ciclo en medio de su ejecución.

        .col-12.mt-5
          .console
            p.cl-gray Ejemplo
            p.cl-green Print (“Uso de la sentencia break”)
            p.cl-green for caracter in "PYTHON SENA":
            p.cl-green.indent_01 if caracter == "N":
            p.cl-green.indent_02 break
            p.cl-green.indent_01 print ("El caracter actual es : " +caracter)
            p.cl-green.mb-0 print (“fin del ciclo”)
          .result
            p Uso de la sentencia break
            p el caracter actual es: P
            p el caracter acutal es: Y
            p el caracter actual es: T
            p el caracter actual es: H
            p el caracter actual es: O
            p.mb-0 fin del ciclo

        .hr-divider.my-5

        .col-12.mt-3
          .list
            .list__item
              .list__item__icon
                img(src="assets/images/icons/icon_duoble_chevron.svg", alt="")
            .list__txt
              p #[strong #[i CONTINUE]]
        
        .col-12
          p A veces se requiere en los ciclos iterativos que se ignoren las siguientes instrucciones y regresar  al inicio del bucle, para continuar con una nueva iteración. Para solucionar esto existe la instrucción #[i continue].
          p En el siguiente ejemplo, si la variable toma el valor de 9, salta al inicio e ejecuta otra iteración.

        .col-12.mt-5
          .console
            p.cl-gray Ejemplo
            p.cl-green print("Uso de la sentencia continue")
            p.cl-green variable = 15
            p.cl-green while variable > 1:
            p.cl-green.indent_01 variable = variable -2
            p.cl-green.indent_01 if variable == 9:
            p.cl-green.indent_02 continue
            p.cl-green.indent_01 print ("Valor actual de la variable : " + str(variable))
            p.cl-green.mb-0 print ("fin del ciclo")
          .result
            p Uso de la sentencia continue
            p Valor actual de la variable: 13            
            p Valor actual de la variable: 11         
            p Valor actual de la variable: 7            
            p Valor actual de la variable: 5            
            p Valor actual de la variable: 3            
            p Valor actual de la variable: 1            
            p.mb-0 fin del ciclo


        .hr-divider.my-5

        .col-12.mt-3
          .list
            .list__item
              .list__item__icon
                img(src="assets/images/icons/icon_duoble_chevron.svg", alt="")
            .list__txt
              p #[strong #[i PASS]]
        
        .col-12
          p La sentencia pass, tal como lo dice su nombre (pasar), es una sentencia nula, o sea que no pasa nada cuando se ejecuta. Se utiliza pass cuando se requiere por sintaxis una instrucción pero no se quiere ejecutar ningún código. También se utiliza en programación donde donde el código irá a futuro, pero no ha sido escrito todavía, utilizándolo como un relleno temporal, es decir, se encuentra “en construcción”.

        .col-12.mt-5
          .console
            p.cl-gray Ejemplo
            p.cl-green print("Uso de la sentencia pass")
            p.cl-green for letra in "PYTHON SENA":            
            p.cl-green.indent_01 if letra == "N":            
            p.cl-green.indent_02 pass
            p.cl-green.indent_01 print ("El caracter actual es :" + letra)
            p.cl-green.mb-0 print ("fin del ciclo")
          .result
            p Uso de la sentencia pass
            p El caracter actual es: P           
            p El caracter actual es: Y           
            p El caracter actual es: T           
            p El caracter actual es: H           
            p El caracter actual es: O           
            p El caracter actual es: N           
            p El caracter actual es:            
            p El caracter actual es: S           
            p El caracter actual es: E           
            p El caracter actual es: N           
            p El caracter actual es: A           
            p.mb-0 fin del ciclo


    .jumbotron.bg-white
      .row
        .col-12
          .header-ecored.mt-3#tema1_5
            h2 1.5 Estructura #[i FOR - ELSE]

      .row.justify-content-center
        .col-12
          p De forma similar a la sentencia #[strong #[i if]], la estructura #[strong #[i for]] también se puede combinar con una sentencia #[strong #[i else]].
          p.mb-4 El bloque #[strong #[i else]] se ejecutará cuando la expresión condicional del bucle for sea #[strong #[i False]].
          p El siguiente ejemplo presenta una conexión a una base de datos de empleados:     
       

        .col-12.mt-5
          .console
            p.cl-gray Ejemplo
            p.cl-green db_connection = "115.0.0.5","7890","root","empleados"
            p.cl-green for parametro in db_connection:
            p.cl-green.indent_01 print parametro
            p.cl-green.print else:
            p.cl-green.print.indent_01 print """El comando PostgreSQL es: 
            p.cl-green.print $ psql -h {server} -p {port} -U {user} -d {db_name}""".format( 
            p.cl-green.print.indent_01 server=db_connection[0], port=db_connection[1], 
            p.cl-green.print.indent_01 user=db_connection[2], db_name=db_connection[3])